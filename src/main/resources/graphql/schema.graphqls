type Query{
    customers:[CustomerDto]
    customerByIdentity(identity:String):CustomerDto
    bankAccounts:[BankAccountDto]
    bankAccountByRib (rib:String):BankAccountDto
    bankAccountById (id:ID):[BankAccountDto]
    bankAccountByUsername (username:String):[BankAccountDto]
    getTop10TransactionsById (id:ID):[TransactionDto]
    getTransactions (dto:GetTransactionListRequest):[TransactionDto]
}
type Mutation {
    createCustomer(dto:AddCustomerRequest):AddCustomerResponse
    signUpCustomer(dto:AddCustomerRequest):AddCustomerResponse
    signUpUser(dto:AddUserRequest):AddUserResponse
    addBankAccount(dto:AddBankAccountRequest):AddBankAccountResponse
    addWirerTransfer(dto:AddWirerTransferRequest):AddWiredTransferResponse
    updateCustomer(identityRef:String,dto:UpdateCustomerRequest):UpdateCustomerResponse
    updatePassword(dto:UpdatePasswordRequest):UpdatePasswordResponse,
    deleteCustomer(identityRef:String):String
}
type CustomerDto {
    username:String,
    identityRef:String,
    firstName:String,
    lastName:String,
    address:String,
}
type BankAccountDto {
    id: String,
    rib:String,
    amount:Float,
    createdAt:String,
    accountStatus:AccountStatus,
    customer:CustomerDto,
}
type TransactionDto {
    createdAt:String,
    transactionType:TransactionType,
    amount:Float,
    bankAccount:BankAccountDto
    users:usersDto
}
type usersDto {
    userName:String
    firstName:String
    lastName:String
}
enum AccountStatus {
    OPENED, CLOSED, BLOCKED
}
enum TransactionType {
    CREDIT,DEBIT
}
input AddCustomerRequest {
    firstName:String,
    lastName:String,
    email:String,
    identityRef:String,
    address:String,
    dateOfBirth:String,
    username:String,
    password:String
}
input AddUserRequest {
    firstName:String,
    lastName:String,
    userName:String,
    password:String
}
input UpdateCustomerRequest {
    username:String,
    firstname:String,
    lastname:String
}
input UpdatePasswordRequest {
    username:String,
    actPassword:String,
    newPassword:String,
    newPasswordConfirm:String
}
type UpdateCustomerResponse {
    id:Int,
    message:String,
    username:String,
    identityRef:String,
    firstname:String,
    lastname:String
}
type UpdatePasswordResponse {
    message:String
}
type AddCustomerResponse {
    firstName:String,
    lastName:String,
    email:String,
    identityRef:String,
    address:String,
    dateOfBirth:String,
    username:String,
    password:String
}
type AddUserResponse {
    message:String,
    firstName:String,
    lastName:String,
    userName:String,
    password:String
}
input AddBankAccountRequest {
    rib:String,
    amount:Float,
    customerIdentityRef:String
}
type AddBankAccountResponse {
    message:String,
    rib:String,
    amount:Float,
    createdAt:String,
    accountStatus:AccountStatus,
    customer:CustomerDto
}
input AddWirerTransferRequest {
    ribFrom:String,
    ribTo:String,
    amount:Float,
    userName:String,

}
type AddWiredTransferResponse {
    message:String,
    transactionFrom:TransactionDto,
    transactionTo:TransactionDto
}
input GetTransactionListRequest {
    rib:String,
    dateTo:String,
    dateFrom:String
}